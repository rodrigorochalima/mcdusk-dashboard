import { useState, useEffect } from 'react';
import './App.css';
import portfolioData from './portfolio-data-new';
import { searchB3Assets, getAssetType } from './b3-api';
import { fundosPrevidencia, cdiData, aportesPrevidencia, previdenciaTotal } from './previdencia-data';

function App() {
  // Estados para controle de navegação
  const [activeTab, setActiveTab] = useState('visao-geral');
  
  // Estados para busca B3
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [selectedAsset, setSelectedAsset] = useState(null);
  const [assetType, setAssetType] = useState('Ação Brasileira');
  
  // Estados para modais
  const [showAddAssetModal, setShowAddAssetModal] = useState(false);
  const [showEditAssetModal, setShowEditAssetModal] = useState(false);
  const [editingAsset, setEditingAsset] = useState(null);
  
  // Estados para chat da IA
  const [chatMessages, setChatMessages] = useState([
    {
      sender: 'ai',
      text: 'Olá! Sou seu assistente de investimentos. Posso ajudar com análises da sua carteira, estratégias e recomendações. Como posso ajudar?',
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    }
  ]);
  const [chatInput, setChatInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  
  // Estados para previdência
  const [selectedFundoPrevidencia, setSelectedFundoPrevidencia] = useState(null);
  const [periodoRentabilidade, setPeriodoRentabilidade] = useState('1a');
  
  // Efeito para busca B3
  useEffect(() => {
    const searchB3 = async () => {
      if (searchTerm.length >= 2) {
        const results = await searchB3Assets(searchTerm);
        setSearchResults(results);
      } else {
        setSearchResults([]);
      }
    };
    
    searchB3();
  }, [searchTerm]);
  
  // Função para selecionar um ativo da busca
  const selectAsset = (asset) => {
    setSelectedAsset(asset);
    setSearchTerm(asset.symbol);
    setAssetType(asset.type);
    setSearchResults([]);
  };
  
  // Função para enviar mensagem no chat da IA
  const handleSendMessage = () => {
    if (!chatInput.trim()) return;
    
    // Adicionar mensagem do usuário
    const userMessage = {
      sender: 'user',
      text: chatInput,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    };
    
    setChatMessages([...chatMessages, userMessage]);
    setChatInput('');
    setIsTyping(true);
    
    // Simular resposta da IA após 1 segundo
    setTimeout(() => {
      let aiResponse;
      
      if (chatInput.toLowerCase().includes('análise') || chatInput.toLowerCase().includes('carteira')) {
        aiResponse = {
          sender: 'ai',
          text: `Analisando sua carteira atual de R$ ${portfolioData.total.valor.toLocaleString('pt-BR')} com resultado de R$ ${portfolioData.total.resultado.toLocaleString('pt-BR')} (+${portfolioData.total.percentual}%):\n\n1. Seu melhor ativo é QBTC11 com +83,1% de rentabilidade\n2. Ativos que precisam de atenção: TGAR11 (-18,9%) e PVBI11 (-16,3%)\n3. Sua exposição em Renda Fixa está em 41,7%, adequada para o cenário atual\n\nRecomendo rebalancear quando um ativo ultrapassar 15% da carteira.`,
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
      } else if (chatInput.toLowerCase().includes('rebalanceamento')) {
        aiResponse = {
          sender: 'ai',
          text: 'Analisando sua carteira, recomendo o seguinte rebalanceamento:\n\n1. Reduzir exposição em QBTC11 (-5%)\n2. Aumentar posição em HGLG11 (+3%)\n3. Iniciar posição em KNRI11 (+2%)\n\nIsso ajudará a equilibrar o risco e aproveitar oportunidades no setor de FIIs de tijolo.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
      } else if (chatInput.toLowerCase().includes('promoção') || chatInput.toLowerCase().includes('promocao')) {
        aiResponse = {
          sender: 'ai',
          text: 'Ativos em promoção hoje com bom potencial:\n\n1. HGLG11: -8% no mês, yield de 8,2% a.a.\n2. VILG11: -5% na semana, bons fundamentos\n3. BBAS3: P/L de 4,5x, abaixo da média histórica\n\nRecomendo análise mais profunda antes de investir.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
      } else if (chatInput.toLowerCase().includes('lucro parcial')) {
        aiResponse = {
          sender: 'ai',
          text: 'Para QBTC11 (+83,1%), recomendo realizar lucro parcial de 30% da posição, pois:\n\n1. Já ultrapassou significativamente seu objetivo de rentabilidade\n2. A volatilidade do Bitcoin continua alta\n3. Você pode realocar em ativos mais estáveis ou manter reserva para oportunidades\n\nConsidere aspectos tributários antes da venda.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
      } else {
        aiResponse = {
          sender: 'ai',
          text: 'Posso ajudar com análises de carteira, recomendações de investimentos, estratégias de alocação e muito mais. Você pode me perguntar sobre seus ativos específicos ou sobre o mercado em geral.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
      }
      
      setChatMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1000);
  };
  
  // Renderização das abas de navegação (2 linhas x 4 colunas)
  const renderTabs = () => {
    return (
      <div className="tabs-container">
        <div className="tabs-row">
          <div className={`tab ${activeTab === 'visao-geral' ? 'active' : ''}`} onClick={() => setActiveTab('visao-geral')}>
            Visão Geral <span className="tab-icon">📊</span>
          </div>
          <div className={`tab ${activeTab === 'analise' ? 'active' : ''}`} onClick={() => setActiveTab('analise')}>
            Análise <span className="tab-icon">📈</span>
          </div>
          <div className={`tab ${activeTab === 'insights' ? 'active' : ''}`} onClick={() => setActiveTab('insights')}>
            Insights <span className="tab-icon">💡</span>
          </div>
          <div className={`tab ${activeTab === 'aprenda' ? 'active' : ''}`} onClick={() => setActiveTab('aprenda')}>
            Aprenda <span className="tab-icon">🎓</span>
          </div>
        </div>
        <div className="tabs-row">
          <div className={`tab ${activeTab === 'gestao' ? 'active' : ''}`} onClick={() => setActiveTab('gestao')}>
            Gestão <span className="tab-icon">⚙️</span>
          </div>
          <div className={`tab ${activeTab === 'descoberta' ? 'active' : ''}`} onClick={() => setActiveTab('descoberta')}>
            Descoberta <span className="tab-icon">🔍</span>
          </div>
          <div className={`tab ${activeTab === 'minha-ia' ? 'active' : ''}`} onClick={() => setActiveTab('minha-ia')}>
            Minha IA <span className="tab-icon">🤖</span>
          </div>
          <div className={`tab ${activeTab === 'minha-previdencia' ? 'active' : ''}`} onClick={() => setActiveTab('minha-previdencia')}>
            Minha Previdência <span className="tab-icon">💰</span>
          </div>
        </div>
      </div>
    );
  };
  
  // Renderização da aba Visão Geral
  const renderVisaoGeral = () => {
    return (
      <div className="tab-content">
        <div className="card">
          <h2 className="card-title">📊 Performance por Categoria</h2>
          {portfolioData.categorias.map((categoria, index) => (
            <div key={index} className={`category-card ${categoria.resultado > 0 ? 'positive' : 'negative'}`}>
              <h3>{categoria.nome}</h3>
              <p className={categoria.resultado > 0 ? 'positive' : 'negative'}>
                {categoria.resultado > 0 ? '+' : ''}R$ {categoria.resultado.toLocaleString('pt-BR', { minimumFractionDigits: 2 })} 
                ({categoria.resultadoPercentual})
              </p>
            </div>
          ))}
        </div>
        
        <div className="card">
          <h2 className="card-title">🏆 Top 3 Ativos</h2>
          {portfolioData.melhoresAtivos.map((ativo, index) => (
            <div key={index} className="asset-card positive">
              <h3>{index + 1}. {ativo.simbolo}</h3>
              <p>{ativo.nome} • +R$ {ativo.resultado.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p className="asset-result">+{ativo.resultadoPercentual}%</p>
            </div>
          ))}
        </div>
        
        <div className="card">
          <h2 className="card-title">⚠️ Piores 3 Ativos</h2>
          {portfolioData.pioresAtivos.map((ativo, index) => (
            <div key={index} className="asset-card negative">
              <h3>{index + 1}. {ativo.simbolo}</h3>
              <p>{ativo.nome} • -R$ {Math.abs(ativo.resultado).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p className="asset-result">{ativo.resultadoPercentual}%</p>
            </div>
          ))}
        </div>
      </div>
    );
  };
  
  // Renderização da aba Gestão
  const renderGestao = () => {
    return (
      <div className="tab-content">
        <div className="header-actions">
          <button className="action-button primary" onClick={() => setShowAddAssetModal(true)}>
            Adicionar Ativo
          </button>
          <button className="action-button secondary">
            Histórico
          </button>
        </div>
        
        <div className="portfolio-summary">
          <div className="summary-item">
            <span className="summary-label">Valor Total</span>
            <span className="summary-value">R$ {portfolioData.total.valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Resultado</span>
            <span className="summary-value positive">
              +R$ {portfolioData.total.resultado.toLocaleString('pt-BR', { minimumFractionDigits: 2 })} (+{portfolioData.total.percentual}%)
            </span>
          </div>
        </div>
        
        <div className="assets-list">
          {portfolioData.ativos.map((ativo, index) => (
            <div key={index} className="asset-item">
              <div className="asset-header">
                <h3>{ativo.simbolo}</h3>
                <span className={`asset-type ${ativo.tipo === 'FII' ? 'fii' : ativo.tipo === 'ETF' ? 'etf' : ativo.tipo === 'Internacional' ? 'internacional' : 'acao'}`}>
                  {ativo.tipo}
                </span>
                {ativo.simbolo !== 'PVBI11' && (
                  <div className="asset-actions">
                    <button className="asset-action edit" onClick={() => {
                      setEditingAsset(ativo);
                      setShowEditAssetModal(true);
                    }}>
                      [E] Editar
                    </button>
                  </div>
                )}
              </div>
              <div className="asset-details">
                <p>{ativo.quantidade} cotas • R$ {ativo.precoMedio.toFixed(2)} • {ativo.resultadoPercentual > 0 ? '+' : ''}{ativo.resultadoPercentual}%</p>
              </div>
            </div>
          ))}
        </div>
        
        {/* Modal para adicionar ativo */}
        {showAddAssetModal && (
          <div className="modal">
            <div className="modal-content">
              <h2>Adicionar Ativo</h2>
              
              <div className="form-group">
                <label>Símbolo do Ativo</label>
                <div className="search-container">
                  <input 
                    type="text" 
                    value={searchTerm} 
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Ex: PETR4, BTLG11"
                  />
                  
                  {searchResults.length > 0 && (
                    <div className="search-results">
                      {searchResults.map((result, index) => (
                        <div 
                          key={index} 
                          className="search-result-item"
                          onClick={() => selectAsset(result)}
                        >
                          <strong>{result.symbol}</strong>
                          <div>{result.name}</div>
                          <div className="result-details">{result.sector} - R$ {result.price.toFixed(2)}</div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
              
              <div className="form-group">
                <label>Tipo</label>
                <select value={assetType} onChange={(e) => setAssetType(e.target.value)}>
                  <option value="Ação Brasileira">Ação Brasileira</option>
                  <option value="Fundo Imobiliário (FII)">Fundo Imobiliário (FII)</option>
                  <option value="BDR (Internacional)">BDR (Internacional)</option>
                  <option value="ETF">ETF</option>
                  <option value="Renda Fixa">Renda Fixa</option>
                </select>
              </div>
              
              <div className="form-group">
                <label>Quantidade</label>
                <input type="number" min="0" step="1" />
              </div>
              
              <div className="form-group">
                <label>Preço de Compra (R$)</label>
                <input type="number" min="0" step="0.01" />
              </div>
              
              <div className="form-actions">
                <button className="action-button secondary" onClick={() => setShowAddAssetModal(false)}>
                  Cancelar
                </button>
                <button className="action-button primary">
                  Adicionar
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* Modal para editar ativo */}
        {showEditAssetModal && editingAsset && (
          <div className="modal">
            <div className="modal-content">
              <h2>Editar {editingAsset.simbolo}</h2>
              
              <div className="form-group">
                <label>Quantidade</label>
                <input type="number" min="0" step="1" defaultValue={editingAsset.quantidade} />
              </div>
              
              <div className="form-group">
                <label>Preço Médio (R$)</label>
                <input type="number" min="0" step="0.01" defaultValue={editingAsset.precoMedio} />
              </div>
              
              <div className="form-actions">
                <button className="action-button secondary" onClick={() => setShowEditAssetModal(false)}>
                  Cancelar
                </button>
                <button className="action-button primary">
                  Salvar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };
  
  // Renderização da aba Minha IA
  const renderMinhaIA = () => {
    return (
      <div className="tab-content">
        <div className="ai-assistant-container">
          <div className="ai-header">
            <h2>🤖 Assistente Inteligente</h2>
            <p>Faça perguntas sobre sua carteira, rebalanceamento, ou estratégias de investimento.</p>
          </div>
          
          <div className="chat-container">
            <div className="chat-messages">
              {chatMessages.map((message, index) => (
                <div key={index} className={`chat-message ${message.sender}`}>
                  <div className="message-content">
                    {message.text.split('\n').map((line, i) => (
                      <p key={i}>{line}</p>
                    ))}
                    <span className="message-time">{message.timestamp}</span>
                  </div>
                </div>
              ))}
              {isTyping && (
                <div className="chat-message ai">
                  <div className="message-content typing">
                    <span>.</span><span>.</span><span>.</span>
                  </div>
                </div>
              )}
            </div>
            
            <div className="chat-input-container">
              <input
                type="text"
                className="chat-input"
                value={chatInput}
                onChange={(e) => setChatInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Digite sua pergunta..."
              />
              <button className="send-button" onClick={handleSendMessage}>
                ➤
              </button>
            </div>
            
            <div className="chat-suggestions">
              <div className="suggestion-chip" onClick={() => setChatInput('Análise da minha carteira')}>
                Análise da minha carteira
              </div>
              <div className="suggestion-chip" onClick={() => setChatInput('Sugestões de rebalanceamento')}>
                Sugestões de rebalanceamento
              </div>
              <div className="suggestion-chip" onClick={() => setChatInput('Ativos em promoção hoje')}>
                Ativos em promoção hoje
              </div>
              <div className="suggestion-chip" onClick={() => setChatInput('Estratégia de lucro parcial')}>
                Estratégia de lucro parcial
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };
  
  // Renderização da aba Insights
  const renderInsights = () => {
    return (
      <div className="tab-content">
        <div className="card">
          <h2 className="card-title">💡 Insights de Mercado</h2>
          
          <div className="asset-card positive">
            <h3>QBTC11 (+83,1%)</h3>
            <p>ETF de Bitcoin está em alta, mas considere realizar lucros parciais.</p>
          </div>
          
          <div className="asset-card negative">
            <h3>⚠️ Atenção Necessária</h3>
            <p>TGAR11 (-18.92%) e PVBI11 (-16.31%) precisam de análise. Considere substituição.</p>
          </div>
        </div>
      </div>
    );
  };
  
  // Renderização da aba Minha Previdência
  const renderMinhaPrevidencia = () => {
    return (
      <div className="tab-content">
        <div className="previdencia-container">
          <div className="previdencia-header">
            <h2>💰 Minha Previdência</h2>
            
            <div className="previdencia-periodo-selector">
              <button 
                className={`periodo-button ${periodoRentabilidade === '1m' ? 'active' : ''}`}
                onClick={() => setPeriodoRentabilidade('1m')}
              >
                1M
              </button>
              <button 
                className={`periodo-button ${periodoRentabilidade === '3m' ? 'active' : ''}`}
                onClick={() => setPeriodoRentabilidade('3m')}
              >
                3M
              </button>
              <button 
                className={`periodo-button ${periodoRentabilidade === '6m' ? 'active' : ''}`}
                onClick={() => setPeriodoRentabilidade('6m')}
              >
                6M
              </button>
              <button 
                className={`periodo-button ${periodoRentabilidade === '1a' ? 'active' : ''}`}
                onClick={() => setPeriodoRentabilidade('1a')}
              >
                1A
              </button>
              <button 
                className={`periodo-button ${periodoRentabilidade === 'total' ? 'active' : ''}`}
                onClick={() => setPeriodoRentabilidade('total')}
              >
                Total
              </button>
            </div>
          </div>
          
          <div className="previdencia-summary">
            <div className="previdencia-summary-item">
              <span className="previdencia-summary-label">Saldo Total</span>
              <span className="previdencia-summary-value">R$ {previdenciaTotal.saldoTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>
            </div>
            <div className="previdencia-summary-item">
              <span className="previdencia-summary-label">Aportes</span>
              <span className="previdencia-summary-value">R$ {previdenciaTotal.aportesTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>
            </div>
            <div className="previdencia-summary-item">
              <span className="previdencia-summary-label">Rentabilidade</span>
              <span className="previdencia-summary-value positive">
                +R$ {previdenciaTotal.rentabilidadeTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })} (+{previdenciaTotal.rentabilidadePercentual.toFixed(2)}%)
              </span>
            </div>
          </div>
          
          <div className="previdencia-fundos">
            {fundosPrevidencia.map((fundo, index) => (
              <div 
                key={index} 
                className="previdencia-fundo-card"
                onClick={() => setSelectedFundoPrevidencia(selectedFundoPrevidencia === fundo.id ? null : fundo.id)}
              >
                <div className="previdencia-fundo-header">
                  <span className="previdencia-fundo-name">{fundo.nome}</span>
                  <span className={`previdencia-fundo-rentabilidade ${fundo.rentabilidade[periodoRentabilidade] >= fundo.cdi[periodoRentabilidade] ? 'positive' : 'negative'}`}>
                    {fundo.rentabilidade[periodoRentabilidade] > 0 ? '+' : ''}{fundo.rentabilidade[periodoRentabilidade].toFixed(2)}%
                  </span>
                </div>
                
                <div className="previdencia-fundo-details">
                  <span>{fundo.tipo}</span>
                  <span>R$ {fundo.saldo.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>
                </div>
                
                {selectedFundoPrevidencia === fundo.id && (
                  <div className="previdencia-fundo-expanded">
                    <div className="previdencia-fundo-metrics">
                      <div className="metric">
                        <span className="metric-label">vs CDI</span>
                        <span className={`metric-value ${fundo.rentabilidade[periodoRentabilidade] >= fundo.cdi[periodoRentabilidade] ? 'positive' : 'negative'}`}>
                          {((fundo.rentabilidade[periodoRentabilidade] / fundo.cdi[periodoRentabilidade]) * 100).toFixed(1)}%
                        </span>
                      </div>
                      <div className="metric">
                        <span className="metric-label">Taxa Adm</span>
                        <span className="metric-value">{fundo.taxaAdm}% a.a.</span>
                      </div>
                      <div className="metric">
                        <span className="metric-label">Início</span>
                        <span className="metric-value">{new Date(fundo.dataInicio).toLocaleDateString('pt-BR')}</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };
  
  // Renderização da aba Análise
  const renderAnalise = () => {
    return (
      <div className="tab-content">
        <div className="card">
          <h2 className="card-title">📈 Análise de Desempenho</h2>
          <p>Análise detalhada da carteira será implementada aqui.</p>
        </div>
      </div>
    );
  };
  
  // Renderização da aba Aprenda
  const renderAprenda = () => {
    return (
      <div className="tab-content">
        <div className="card">
          <h2 className="card-title">🎓 Conteúdo Educacional</h2>
          <p>Conteúdo educacional sobre investimentos será implementado aqui.</p>
        </div>
      </div>
    );
  };
  
  // Renderização da aba Descoberta
  const renderDescoberta = () => {
    return (
      <div className="tab-content">
        <div className="card">
          <h2 className="card-title">🔍 Descoberta de Ativos</h2>
          <p>Ferramenta de descoberta de novos ativos será implementada aqui.</p>
        </div>
      </div>
    );
  };
  
  return (
    <div>
      {/* Navegação por abas */}
      {renderTabs()}
      
      {/* Conteúdo das abas */}
      {activeTab === 'visao-geral' && renderVisaoGeral()}
      {activeTab === 'gestao' && renderGestao()}
      {activeTab === 'minha-ia' && renderMinhaIA()}
      {activeTab === 'insights' && renderInsights()}
      {activeTab === 'minha-previdencia' && renderMinhaPrevidencia()}
      {activeTab === 'analise' && renderAnalise()}
      {activeTab === 'aprenda' && renderAprenda()}
      {activeTab === 'descoberta' && renderDescoberta()}
    </div>
  );
}

export default App;
